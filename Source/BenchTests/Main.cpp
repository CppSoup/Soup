#include "nanobench.h"

import Opal;
import Soup.Core;

using namespace Opal;

int main()
{
	{
		auto binaryFileContent = std::vector<unsigned char>(
		{
			'B', 'V', 'T', '\0', 0x02, 0x00, 0x00, 0x00,
			'T', 'B', 'L', '\0', 0x00, 0x00, 0x00, 0x00,
		});
		auto content = std::stringstream(std::string(reinterpret_cast<char*>(binaryFileContent.data()), binaryFileContent.size()));

		ankerl::nanobench::Bench().minEpochIterations(10000).run("ValueTableReader Deserialize Empty", [&]
		{
			auto actual = Soup::Core::ValueTableReader::Deserialize(content);
			ankerl::nanobench::doNotOptimizeAway(actual);
		});
	}

	{
		auto binaryFileContent = std::vector<unsigned char>(
		{
			'B', 'V', 'T', '\0', 0x02, 0x00, 0x00, 0x00,
			'T', 'B', 'L', '\0', 0x08, 0x00, 0x00, 0x00,
			0x0b, 0x00, 0x00, 0x00, 'T', 'e', 's', 't', 'B', 'o', 'o', 'l', 'e', 'a', 'n', 0x6, 0x0, 0x0, 0x0, 0x1, 0x00, 0x00, 0x00,
			0x0d, 0x00, 0x00, 0x00, 'T', 'e', 's', 't', 'D', 'e', 'e', 'p', 'T', 'a', 'b', 'l', 'e', 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 'V', 'a', 'l', 'u', 'e', '1', 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 'V', 'a', 'l', 'u', 'e', '2', 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 'V', 'a', 'l', 'u', 'e', '3', 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 'V', 'a', 'l', 'u', 'e', '4', 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0d, 0x00, 0x00, 0x00, 'T', 'e', 's', 't', 'E', 'm', 'p', 't', 'y', 'L', 'i', 's', 't', 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0e, 0x00, 0x00, 0x00, 'T', 'e', 's', 't', 'E', 'm', 'p', 't', 'y', 'T', 'a', 'b', 'l', 'e', 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x09, 0x00, 0x00, 0x00, 'T', 'e', 's', 't', 'F', 'l', 'o', 'a', 't', 0x5, 0x0, 0x0, 0x0, 0xae, 0x47, 0xe1, 0x7a, 0x14, 0xae, 0xf3, 0x3f,
			0x0b, 0x00, 0x00, 0x00, 'T', 'e', 's', 't', 'I', 'n', 't', 'e', 'g', 'e', 'r', 0x4, 0x0, 0x0, 0x0, 0x85, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0x0f, 0x00, 0x00, 0x00, 'T', 'e', 's', 't', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'L', 'i', 's', 't', 0x2, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0a, 0x00, 0x00, 0x00, 'T', 'e', 's', 't', 'S', 't', 'r', 'i', 'n', 'g', 0x3, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 'V', 'a', 'l', 'u', 'e',
		});
		auto content = std::stringstream(std::string(reinterpret_cast<char*>(binaryFileContent.data()), binaryFileContent.size()));

		ankerl::nanobench::Bench().minEpochIterations(10000).run("ValueTableReader Deserialize Complex", [&]
		{
			auto actual = Soup::Core::ValueTableReader::Deserialize(content);
			ankerl::nanobench::doNotOptimizeAway(actual);
		});
	}
}