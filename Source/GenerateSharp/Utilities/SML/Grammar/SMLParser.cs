//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SML.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class SMLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COLON=1, AT_SIGN=2, LESS_THAN=3, GREATER_THAN=4, OPEN_BRACKET=5, CLOSE_BRACKET=6, 
		OPEN_BRACE=7, CLOSE_BRACE=8, PIPE=9, COMMA=10, TRUE=11, FALSE=12, NEWLINE=13, 
		COMMENT=14, VERSION=15, FLOAT=16, INTEGER=17, KEY_LITERAL=18, USER_NAME=19, 
		PACKAGE_NAME=20, STRING_LITERAL=21, WHITESPACE=22;
	public const int
		RULE_document = 0, RULE_table = 1, RULE_tableContent = 2, RULE_tableValue = 3, 
		RULE_key = 4, RULE_array = 5, RULE_arrayContent = 6, RULE_userName = 7, 
		RULE_packageReference = 8, RULE_value = 9, RULE_delimiter = 10, RULE_leadingNewlines = 11, 
		RULE_trailingNewlines = 12;
	public static readonly string[] ruleNames = {
		"document", "table", "tableContent", "tableValue", "key", "array", "arrayContent", 
		"userName", "packageReference", "value", "delimiter", "leadingNewlines", 
		"trailingNewlines"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'@'", "'<'", "'>'", "'['", "']'", "'{'", "'}'", "'|'", "','", 
		"'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COLON", "AT_SIGN", "LESS_THAN", "GREATER_THAN", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "OPEN_BRACE", "CLOSE_BRACE", "PIPE", "COMMA", "TRUE", 
		"FALSE", "NEWLINE", "COMMENT", "VERSION", "FLOAT", "INTEGER", "KEY_LITERAL", 
		"USER_NAME", "PACKAGE_NAME", "STRING_LITERAL", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SML.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SMLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SMLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SMLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LeadingNewlinesContext leadingNewlines() {
			return GetRuleContext<LeadingNewlinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableContentContext tableContent() {
			return GetRuleContext<TableContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingNewlinesContext trailingNewlines() {
			return GetRuleContext<TrailingNewlinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SMLParser.Eof, 0); }
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			leadingNewlines();
			State = 27;
			tableContent();
			State = 28;
			trailingNewlines();
			State = 29;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SMLParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeadingNewlinesContext leadingNewlines() {
			return GetRuleContext<LeadingNewlinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableContentContext tableContent() {
			return GetRuleContext<TableContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingNewlinesContext trailingNewlines() {
			return GetRuleContext<TrailingNewlinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SMLParser.CLOSE_BRACE, 0); }
		public TableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableContext table() {
		TableContext _localctx = new TableContext(Context, State);
		EnterRule(_localctx, 2, RULE_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			Match(OPEN_BRACE);
			State = 32;
			leadingNewlines();
			State = 33;
			tableContent();
			State = 34;
			trailingNewlines();
			State = 35;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableValueContext[] tableValue() {
			return GetRuleContexts<TableValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableValueContext tableValue(int i) {
			return GetRuleContext<TableValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelimiterContext[] delimiter() {
			return GetRuleContexts<DelimiterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelimiterContext delimiter(int i) {
			return GetRuleContext<DelimiterContext>(i);
		}
		public TableContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableContentContext tableContent() {
		TableContentContext _localctx = new TableContentContext(Context, State);
		EnterRule(_localctx, 4, RULE_tableContent);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEY_LITERAL || _la==STRING_LITERAL) {
				{
				State = 37;
				tableValue();
				State = 43;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 38;
						delimiter();
						State = 39;
						tableValue();
						}
						} 
					}
					State = 45;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SMLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public TableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableValueContext tableValue() {
		TableValueContext _localctx = new TableValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_tableValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			key();
			State = 49;
			Match(COLON);
			State = 50;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
	 
		public KeyContext() { }
		public virtual void CopyFrom(KeyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class KeyLiteralContext : KeyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_LITERAL() { return GetToken(SMLParser.KEY_LITERAL, 0); }
		public KeyLiteralContext(KeyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class KeyStringContext : KeyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(SMLParser.STRING_LITERAL, 0); }
		public KeyStringContext(KeyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 8, RULE_key);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEY_LITERAL:
				_localctx = new KeyLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				Match(KEY_LITERAL);
				}
				break;
			case STRING_LITERAL:
				_localctx = new KeyStringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 53;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SMLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeadingNewlinesContext leadingNewlines() {
			return GetRuleContext<LeadingNewlinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContentContext arrayContent() {
			return GetRuleContext<ArrayContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingNewlinesContext trailingNewlines() {
			return GetRuleContext<TrailingNewlinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SMLParser.CLOSE_BRACKET, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 10, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(OPEN_BRACKET);
			State = 57;
			leadingNewlines();
			State = 58;
			arrayContent();
			State = 59;
			trailingNewlines();
			State = 60;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelimiterContext[] delimiter() {
			return GetRuleContexts<DelimiterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelimiterContext delimiter(int i) {
			return GetRuleContext<DelimiterContext>(i);
		}
		public ArrayContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContentContext arrayContent() {
		ArrayContentContext _localctx = new ArrayContentContext(Context, State);
		EnterRule(_localctx, 12, RULE_arrayContent);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2332840L) != 0) {
				{
				State = 62;
				value();
				State = 68;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 63;
						delimiter();
						State = 64;
						value();
						}
						} 
					}
					State = 70;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_NAME() { return GetToken(SMLParser.USER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(SMLParser.PIPE, 0); }
		public UserNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserNameContext userName() {
		UserNameContext _localctx = new UserNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_userName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USER_NAME) {
				{
				State = 73;
				Match(USER_NAME);
				State = 74;
				Match(PIPE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(SMLParser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE_NAME() { return GetToken(SMLParser.PACKAGE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN() { return GetToken(SMLParser.AT_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(SMLParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SMLParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SMLParser.FLOAT, 0); }
		public PackageReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageReferenceContext packageReference() {
		PackageReferenceContext _localctx = new PackageReferenceContext(Context, State);
		EnterRule(_localctx, 16, RULE_packageReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(LESS_THAN);
			State = 78;
			userName();
			State = 79;
			Match(PACKAGE_NAME);
			State = 80;
			Match(AT_SIGN);
			State = 81;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOAT || _la==INTEGER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 82;
			Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueTrueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SMLParser.TRUE, 0); }
		public ValueTrueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFalseContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SMLParser.FALSE, 0); }
		public ValueFalseContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueStringContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(SMLParser.STRING_LITERAL, 0); }
		public ValueStringContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValuePackageReferenceContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackageReferenceContext packageReference() {
			return GetRuleContext<PackageReferenceContext>(0);
		}
		public ValuePackageReferenceContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuePackageReference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueVersionContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION() { return GetToken(SMLParser.VERSION, 0); }
		public ValueVersionContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueVersion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTableContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableContext table() {
			return GetRuleContext<TableContext>(0);
		}
		public ValueTableContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueArrayContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ValueArrayContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueArray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueIntegerContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SMLParser.INTEGER, 0); }
		public ValueIntegerContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFloatContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SMLParser.FLOAT, 0); }
		public ValueFloatContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_value);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOAT:
				_localctx = new ValueFloatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				Match(FLOAT);
				}
				break;
			case INTEGER:
				_localctx = new ValueIntegerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				Match(INTEGER);
				}
				break;
			case LESS_THAN:
				_localctx = new ValuePackageReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 86;
				packageReference();
				}
				break;
			case VERSION:
				_localctx = new ValueVersionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 87;
				Match(VERSION);
				}
				break;
			case STRING_LITERAL:
				_localctx = new ValueStringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 88;
				Match(STRING_LITERAL);
				}
				break;
			case TRUE:
				_localctx = new ValueTrueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 89;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new ValueFalseContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 90;
				Match(FALSE);
				}
				break;
			case OPEN_BRACE:
				_localctx = new ValueTableContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 91;
				table();
				}
				break;
			case OPEN_BRACKET:
				_localctx = new ValueArrayContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 92;
				array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelimiterContext : ParserRuleContext {
		public DelimiterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delimiter; } }
	 
		public DelimiterContext() { }
		public virtual void CopyFrom(DelimiterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommaDelimiterContext : DelimiterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SMLParser.COMMA, 0); }
		public CommaDelimiterContext(DelimiterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaDelimiter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewlineDelimiterContext : DelimiterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SMLParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SMLParser.NEWLINE, i);
		}
		public NewlineDelimiterContext(DelimiterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewlineDelimiter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelimiterContext delimiter() {
		DelimiterContext _localctx = new DelimiterContext(Context, State);
		EnterRule(_localctx, 20, RULE_delimiter);
		int _la;
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEWLINE:
				_localctx = new NewlineDelimiterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 95;
					Match(NEWLINE);
					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==NEWLINE );
				}
				break;
			case COMMA:
				_localctx = new CommaDelimiterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 100;
				Match(COMMA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeadingNewlinesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SMLParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SMLParser.NEWLINE, i);
		}
		public LeadingNewlinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leadingNewlines; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeadingNewlines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeadingNewlinesContext leadingNewlines() {
		LeadingNewlinesContext _localctx = new LeadingNewlinesContext(Context, State);
		EnterRule(_localctx, 22, RULE_leadingNewlines);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 103;
					Match(NEWLINE);
					}
					} 
				}
				State = 108;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingNewlinesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SMLParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SMLParser.NEWLINE, i);
		}
		public TrailingNewlinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingNewlines; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMLVisitor<TResult> typedVisitor = visitor as ISMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrailingNewlines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrailingNewlinesContext trailingNewlines() {
		TrailingNewlinesContext _localctx = new TrailingNewlinesContext(Context, State);
		EnterRule(_localctx, 24, RULE_trailingNewlines);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 109;
				Match(NEWLINE);
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,22,116,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,42,8,2,10,2,12,2,45,9,2,3,
		2,47,8,2,1,3,1,3,1,3,1,3,1,4,1,4,3,4,55,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
		6,1,6,1,6,1,6,5,6,67,8,6,10,6,12,6,70,9,6,3,6,72,8,6,1,7,1,7,3,7,76,8,
		7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,
		94,8,9,1,10,4,10,97,8,10,11,10,12,10,98,1,10,3,10,102,8,10,1,11,5,11,105,
		8,11,10,11,12,11,108,9,11,1,12,5,12,111,8,12,10,12,12,12,114,9,12,1,12,
		0,0,13,0,2,4,6,8,10,12,14,16,18,20,22,24,0,1,1,0,16,17,120,0,26,1,0,0,
		0,2,31,1,0,0,0,4,46,1,0,0,0,6,48,1,0,0,0,8,54,1,0,0,0,10,56,1,0,0,0,12,
		71,1,0,0,0,14,75,1,0,0,0,16,77,1,0,0,0,18,93,1,0,0,0,20,101,1,0,0,0,22,
		106,1,0,0,0,24,112,1,0,0,0,26,27,3,22,11,0,27,28,3,4,2,0,28,29,3,24,12,
		0,29,30,5,0,0,1,30,1,1,0,0,0,31,32,5,7,0,0,32,33,3,22,11,0,33,34,3,4,2,
		0,34,35,3,24,12,0,35,36,5,8,0,0,36,3,1,0,0,0,37,43,3,6,3,0,38,39,3,20,
		10,0,39,40,3,6,3,0,40,42,1,0,0,0,41,38,1,0,0,0,42,45,1,0,0,0,43,41,1,0,
		0,0,43,44,1,0,0,0,44,47,1,0,0,0,45,43,1,0,0,0,46,37,1,0,0,0,46,47,1,0,
		0,0,47,5,1,0,0,0,48,49,3,8,4,0,49,50,5,1,0,0,50,51,3,18,9,0,51,7,1,0,0,
		0,52,55,5,18,0,0,53,55,5,21,0,0,54,52,1,0,0,0,54,53,1,0,0,0,55,9,1,0,0,
		0,56,57,5,5,0,0,57,58,3,22,11,0,58,59,3,12,6,0,59,60,3,24,12,0,60,61,5,
		6,0,0,61,11,1,0,0,0,62,68,3,18,9,0,63,64,3,20,10,0,64,65,3,18,9,0,65,67,
		1,0,0,0,66,63,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,72,
		1,0,0,0,70,68,1,0,0,0,71,62,1,0,0,0,71,72,1,0,0,0,72,13,1,0,0,0,73,74,
		5,19,0,0,74,76,5,9,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,15,1,0,0,0,77,78,
		5,3,0,0,78,79,3,14,7,0,79,80,5,20,0,0,80,81,5,2,0,0,81,82,7,0,0,0,82,83,
		5,4,0,0,83,17,1,0,0,0,84,94,5,16,0,0,85,94,5,17,0,0,86,94,3,16,8,0,87,
		94,5,15,0,0,88,94,5,21,0,0,89,94,5,11,0,0,90,94,5,12,0,0,91,94,3,2,1,0,
		92,94,3,10,5,0,93,84,1,0,0,0,93,85,1,0,0,0,93,86,1,0,0,0,93,87,1,0,0,0,
		93,88,1,0,0,0,93,89,1,0,0,0,93,90,1,0,0,0,93,91,1,0,0,0,93,92,1,0,0,0,
		94,19,1,0,0,0,95,97,5,13,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,
		98,99,1,0,0,0,99,102,1,0,0,0,100,102,5,10,0,0,101,96,1,0,0,0,101,100,1,
		0,0,0,102,21,1,0,0,0,103,105,5,13,0,0,104,103,1,0,0,0,105,108,1,0,0,0,
		106,104,1,0,0,0,106,107,1,0,0,0,107,23,1,0,0,0,108,106,1,0,0,0,109,111,
		5,13,0,0,110,109,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,
		0,113,25,1,0,0,0,114,112,1,0,0,0,11,43,46,54,68,71,75,93,98,101,106,112
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
